doctype html
head
  meta(charset='utf-8')
  meta(name='viewport', content='width=device-width, initial-scale=1')
  title

  style.
  
    
    
    .map_wrap, .map_wrap * {margin:0;padding:0;font-family:'NotoSansCJKkr-Medium',dotum,'돋움',sans-serif;font-size:15px;}
    //- .map_wrap a, .map_wrap a:hover, .map_wrap a:active{color:#000;text-decoration: none;}
    .map_wrap {position:relative;width:100%;height:500px;}
      #menu_wrap {position:absolute;top:0;left:0;bottom:0;width:100%;margin:0px 0 0ox 0px;padding:0px;overflow-y:auto;background:rgba(255, 255, 255, 0.7);z-index: 1;font-size:12px;border-radius: 0px;}
      .bg_white {background:#000;}
     
    //- #menu_wrap .option{text-align: center; width:100%;}
    //- #menu_wrap .option p {margin:10px 0;}
    //- #menu_wrap .option button {  border: 0;
    //-     background: none;
    //-     /** belows styles are working good */
    //-     padding: 2px 5px;
    //-     margin-top: 2px;
    //-     position: relative;
    //-     left: -28px;
    //-     /* IE7-8 doesn't have border-radius, so don't indent the padding */
    //-     margin-bottom: 0;
    //-     -webkit-border-radius: 3px;
    //-     -moz-border-radius: 3px;
    //-     border-radius: 3px;}
    #placesList li {list-style: none;}
    #placesList .item {position:relative;border-bottom:1px solid #cacaca ;overflow: hidden;cursor: pointer;min-height: 65px;}
    #placesList .item span {display: block;margin-top:4px;}
    #placesList .item h5, #placesList .item .info {text-overflow: ellipsis;overflow: hidden;white-space: nowrap;}
    #placesList .item .info{padding:10px 0 10px 10px;}
    #placesList .info .gray {color:#8a8a8a;}
    #placesList .info .jibun {padding-left:26px;background:url(https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/places_jibun.png) no-repeat;}
    #placesList .info .tel {color:#ff7294;}
    #placesList .item .marker_1 {background-position: 0 -10px;}
    #placesList .item .marker_2 {background-position: 0 -56px;}
    #placesList .item .marker_3 {background-position: 0 -102px}
    #placesList .item .marker_4 {background-position: 0 -148px;}
    #placesList .item .marker_5 {background-position: 0 -194px;}
    #placesList .item .marker_6 {background-position: 0 -240px;}
    #placesList .item .marker_7 {background-position: 0 -286px;}
    #placesList .item .marker_8 {background-position: 0 -332px;}
    #placesList .item .marker_9 {background-position: 0 -378px;}
    #placesList .item .marker_10 {background-position: 0 -423px;}
    #placesList .item .marker_11 {background-position: 0 -470px;}
    #placesList .item .marker_12 {background-position: 0 -516px;}
    #placesList .item .marker_13 {background-position: 0 -562px;}
    #placesList .item .marker_14 {background-position: 0 -608px;}
    #placesList .item .marker_15 {background-position: 0 -654px;}
    //-  #pagination {margin:10px auto;text-align: center;}
    //-  #pagination a {display:inline-block;margin-right:10px;}
    //-  #pagination .on {font-weight: bold; cursor: default;color:#777;}
.map_wrap
 #map(style='position: fixed;\
width: 100%;\
height: 100%;\
left: 0;\
top: 0;\
background: rgba(0,0,0,0);\
z-index: 10;')
  #menu_wrap.bg_white
    //- .option
    //-   div
    //-     form(onsubmit='searchPlaces(); return false;', id="custom-search-form", class="form-search form-horizontal pull-right")
        
    //-       input#keyword(type='text', value='광주 맛집', size='15',class="search-query")
    //-       button(class="searchButton" , type='submit',  class="btn") 
    //-       i.icon-search

              
    hr
    ul#placesList
    #pagination
script(type='text/javascript' src='//dapi.kakao.com/v2/maps/sdk.js?appkey=5a323567d193d1f90625406988f60389&libraries=services')


script.
  // 마커를 담을 배열입니다
   var keyword = #{searchkey};
   console.log(keyword);
   function getResult(address){
        // console.log('address');
       //       console.log(address);
             Print.postMessage(address);
        }  
  // 장소 검색 객체를 생성합니다
  var ps = new kakao.maps.services.Places();
  // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
  var infowindow = new kakao.maps.InfoWindow({zIndex:1});
  // 키워드로 장소를 검색합니다
  searchPlaces();
  // 키워드 검색을 요청하는 함수입니다
  function searchPlaces() {
    
   
  //var keyword = document.getElementById('keyword').value;
  if (!keyword.replace(/^\\s+|\s+$/g, '')) {
   getResult('null');
  return false;
  }
  // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다
  ps.keywordSearch( keyword, placesSearchCB,{ location: new kakao.maps.LatLng(#{lat}, #{long})});
  }
  // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
  function placesSearchCB(data, status, pagination) {
  if (status === kakao.maps.services.Status.OK) {
  // 정상적으로 검색이 완료됐으면
  // 검색 목록과 마커를 표출합니다
  displayPlaces(data);
  // 페이지 번호를 표출합니다
  //displayPagination(pagination);
  } else if (status === kakao.maps.services.Status.ZERO_RESULT) {
   getResult('null');
  return;
  } else if (status === kakao.maps.services.Status.ERROR) {
   getResult('null');
  return;
  }
  }
  // 검색 결과 목록과 마커를 표출하는 함수입니다
  function displayPlaces(places) {
  var listEl = document.getElementById('placesList'),
  menuEl = document.getElementById('menu_wrap'),
  fragment = document.createDocumentFragment(),
  bounds = new kakao.maps.LatLngBounds(),
  listStr = '';
  // 검색 결과 목록에 추가된 항목들을 제거합니다
  removeAllChildNods(listEl);
  
  for ( var i=0; i<places.length; i++ ) {
   
  itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다
   
  fragment.appendChild(itemEl);
  }
  // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다
  listEl.appendChild(fragment);
  menuEl.scrollTop = 0;
  // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
  //map.setBounds(bounds);
  }
    
  // 검색결과 항목을 Element로 반환하는 함수입니다
  function getListItem(index, places) {
  var address = "'"+ places.address_name+"'";
  var el = document.createElement('li'),
  itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +
  '<div class="info" onclick="getResult('+address+')" >' +
  '   <h5 >' + places.place_name + '</h5>';
  if (places.road_address_name) {
  itemStr += '    <span>' + places.road_address_name + '</span>' +
  '   <span class="jibun gray">' +  places.address_name  + '</span>';
  } else {
  itemStr += '    <span>' +  places.address_name  + '</span>';
  }
  itemStr += '  <span class="tel">' + places.phone  + '</span>' +
  '</div>';
  el.innerHTML = itemStr;
  el.className = 'item';
  //console.log(places.road_address_name);
  console.log(places.address_name);
  return el;

  }
   
  function removeAllChildNods(el) {
  while (el.hasChildNodes()) {
  el.removeChild (el.lastChild);
  }
  }
 